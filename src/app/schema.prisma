
datasource db {
  url      = env("MONGO_URL")
  provider = "mongodb"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  email                 String   @unique
  name                  String
  password              String?
  profilepiclink        String?
  currentTotalPoints    Int?      @default(0)
  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @updatedAt
  pointsRecord          Point[]
  maxScoresIn           Game[]
  maxPointsValue        Int?
  maxPointsValueAt      DateTime?
  socialLinks           SocialLinks?
}

model SocialLinks{
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  linkedin  String? 
  instagram String? 
  twitter   String? 
  userId    String @unique @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Point{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  value         Int       @default(0)
  scoredAt      DateTime  @default(now())
  userId        String    @db.ObjectId
  gameId        String    @db.ObjectId
  earnedBy      User      @relation(fields: [userId], references: [id])
  earnedInGame  Game      @relation(fields: [gameId], references: [id])
}

model Game{
  id                        String        @id @default(auto()) @map("_id") @db.ObjectId
  name                      String        @unique
  createdAt                 DateTime      @default(now())
  highestScore              Int           @default(0)
  highestScoreRecordedBy    String?        @db.ObjectId
  UserWithHighestScore      User?          @relation(fields: [highestScoreRecordedBy], references: [id])
  playedByCount             Int           @default(0)
  points                    Point[]
}

model StandardTracker {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  currentIndex    Int       @default(0)
  lastUpdated     DateTime  @default(now())
}
